how many states in all half-twists?

branch and bound more principled but seems slow to find better bounds

las vegas optimal speedup doesn't seem to find more folksiness than average rollout

current rollouts from each branch inc should give some indication of best possible rollout from there, measure this empirically?
    try to fit a function f(ema, numrollouts, [rollout folksiness]) that tight-upper-bounds optimal folksiness with high probability?

big rollout experiment:
    branchpoint ema is pretty well correlated with stdev of rollout folksiness
    absolute dev between population mean folksiness and sample-so-far mean folksiness decays rapidly
    branchpoint ema is also pretty well correlated with folksiness of optimal rollout

meta-completeness proofs:
    can any possible rule table (subject to prefix tree restraints) be created with the right non-deterministic choices?
        maybe could prove this by assuming scrambles appear in prototype order
    
prefix tree restraints might boil down to: for each state, there is a unique rule (or no rule) that matches it (state->rule mappings are many->one)

alternative ftb:
    just try to minimize number of rules at convergence with new ftb mcts.
    with current speed-up, can run every rollout to terminal state in mcts in <= about one hour for full pocket cube
    provably better efficiency:
        static period estimates fraction of unhandled states, which bounds-above remaining rules needed (and current num rules bounds below).
        pick next fork based on this
fork-the-best rewrite
split macro db from prefix functionality
    don't subclass, violates LSP and copy does not play well with inheritance
    macro db init holds ref to prefix db
    prefix db does not have macros or costs, just patterns and wildcards
    macro db includes macros, costs, and permutations for each macro to apply it quickly
profile full ftb again with prefix db
new ftb:
    try multiple trails from each fork-point, including trail root
    move fork-points forward rather than from trail end?
    coordinate with full frontier to save any trail that is non-dominated, regardless of current scalarization
go from facie to oriented cubie representation
replace actions with action indexes in cube domain
replace actions with action indexes in macro database
prefix tree refs:
    http://dx.doi.org/10.1109/GrC.2012.6468626
    http://hanj.cs.illinois.edu/pdf/dami04_fptree.pdf
    https://sigir.org/sigir2021/ (on AAAI shortlist)
    https://arxiv.org/ftp/arxiv/papers/1007/1007.0085.pdf (mainly for refs)
    https://www.kdd.org/kdd2021/ (on AAAI shortlist)

DONE tried array version of prefix tree but marginal performance change
DONE successful construction for pocket cube in one hour, 500k rules for 3600k states
DONE all_scrambles generator instead of building all reversed paths in memory
DONE confirmed for make_tau that prefix query returns None when no brute matches, when prefix query returns rule it is the sole brute match
DONE constructor rewrite
DONE macro permutations in mdb
DONE algorithm with mdb
DONE copy macro database
DONE rewindable prefix macro database
DONE speed test for macro database vs brute query (two orders of magnitude faster at 1000 rules)
DONE "system" test for macro database add rule: must match brute query result
